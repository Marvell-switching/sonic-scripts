From eca9438b079b282f235691a632204ba9d8fb6157 Mon Sep 17 00:00:00 2001
From: Pavan Naregundi <pnaregundi@marvell.com>
Date: Thu, 21 Mar 2024 12:01:42 +0000
Subject: Marvell pfc detect change

Signed-off-by: Pavan Naregundi <pnaregundi@marvell.com>
---
 orchagent/Makefile.am            |  1 +
 orchagent/orchdaemon.cpp         |  3 +-
 orchagent/pfc_detect_marvell.lua | 99 ++++++++++++++++++++++++++++++++
 3 files changed, 102 insertions(+), 1 deletion(-)
 create mode 100644 orchagent/pfc_detect_marvell.lua

diff --git a/orchagent/Makefile.am b/orchagent/Makefile.am
index 6af8189c..a639c142 100644
--- a/orchagent/Makefile.am
+++ b/orchagent/Makefile.am
@@ -21,6 +21,7 @@ dist_swss_DATA = \
 		 pfc_detect_innovium.lua  \
 		 pfc_detect_mellanox.lua  \
 		 pfc_detect_broadcom.lua \
+		 pfc_detect_marvell.lua \
 		 pfc_detect_barefoot.lua \
 		 pfc_detect_nephos.lua \
 		 pfc_detect_cisco-8000.lua \
diff --git a/orchagent/orchdaemon.cpp b/orchagent/orchdaemon.cpp
index a2e7f86a..f4d881cb 100644
--- a/orchagent/orchdaemon.cpp
+++ b/orchagent/orchdaemon.cpp
@@ -575,6 +575,7 @@ bool OrchDaemon::init()
     }
     else if ((platform == INVM_PLATFORM_SUBSTRING)
              || (platform == BFN_PLATFORM_SUBSTRING)
+             || (platform == MRVL_PLATFORM_SUBSTRING)
              || (platform == NPS_PLATFORM_SUBSTRING))
     {
 
@@ -606,7 +607,7 @@ bool OrchDaemon::init()
 
         static const vector<sai_queue_attr_t> queueAttrIds;
 
-        if ((platform == INVM_PLATFORM_SUBSTRING) || (platform == NPS_PLATFORM_SUBSTRING))
+        if ((platform == INVM_PLATFORM_SUBSTRING) || (platform == NPS_PLATFORM_SUBSTRING) || (platform == MRVL_PLATFORM_SUBSTRING))
         {
             m_orchList.push_back(new PfcWdSwOrch<PfcWdZeroBufferHandler, PfcWdLossyHandler>(
                         m_configDb,
diff --git a/orchagent/pfc_detect_marvell.lua b/orchagent/pfc_detect_marvell.lua
new file mode 100644
index 00000000..6e5b710b
--- /dev/null
+++ b/orchagent/pfc_detect_marvell.lua
@@ -0,0 +1,99 @@
+-- KEYS - queue IDs
+-- ARGV[1] - counters db index
+-- ARGV[2] - counters table name
+-- ARGV[3] - poll time interval (milliseconds)
+-- return queue Ids that satisfy criteria
+
+local counters_db = ARGV[1]
+local counters_table_name = ARGV[2]
+local poll_time = tonumber(ARGV[3]) * 1000
+
+local rets = {}
+
+redis.call('SELECT', counters_db)
+
+-- Iterate through each queue
+local n = table.getn(KEYS)
+for i = n, 1, -1 do
+    local counter_keys = redis.call('HKEYS', counters_table_name .. ':' .. KEYS[i])
+    local counter_num = 0
+    local old_counter_num = 0
+    local is_deadlock = false
+    local pfc_wd_status = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'PFC_WD_STATUS')
+    local pfc_wd_action = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'PFC_WD_ACTION')
+    local big_red_switch_mode = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'BIG_RED_SWITCH_MODE')
+    if not big_red_switch_mode and (pfc_wd_status == 'operational' or pfc_wd_action == 'alert') then
+        local detection_time = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'PFC_WD_DETECTION_TIME')
+        if detection_time then
+            detection_time = tonumber(detection_time)
+            local time_left = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'PFC_WD_DETECTION_TIME_LEFT')
+            if not time_left  then
+                time_left = detection_time
+            else
+                time_left = tonumber(time_left)
+            end
+
+            local queue_index = redis.call('HGET', 'COUNTERS_QUEUE_INDEX_MAP', KEYS[i])
+            local port_id = redis.call('HGET', 'COUNTERS_QUEUE_PORT_MAP', KEYS[i])
+            local pfc_rx_pkt_key = 'SAI_PORT_STAT_PFC_' .. queue_index .. '_RX_PKTS'
+            local pfc_duration_key = 'SAI_PORT_STAT_PFC_' .. queue_index .. '_RX_PAUSE_DURATION'
+
+            -- Get all counters
+            local occupancy_bytes = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'SAI_QUEUE_STAT_CURR_OCCUPANCY_BYTES')
+            local packets = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'SAI_QUEUE_STAT_PACKETS')
+            local pfc_rx_packets = redis.call('HGET', counters_table_name .. ':' .. port_id, pfc_rx_pkt_key)
+            local pfc_duration = "0"
+
+            if occupancy_bytes and packets and pfc_rx_packets and pfc_duration then
+                occupancy_bytes = tonumber(occupancy_bytes)
+                packets = tonumber(packets)
+                pfc_rx_packets = tonumber(pfc_rx_packets)
+                pfc_duration =  tonumber(pfc_duration)
+
+                local packets_last = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'SAI_QUEUE_STAT_PACKETS_last')
+                local pfc_rx_packets_last = redis.call('HGET', counters_table_name .. ':' .. port_id, pfc_rx_pkt_key .. '_last')
+                local pfc_duration_last = redis.call('HGET', counters_table_name .. ':' .. port_id, pfc_duration_key .. '_last')
+                -- DEBUG CODE START. Uncomment to enable
+                local debug_storm = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'DEBUG_STORM')
+                -- DEBUG CODE END.
+
+                -- If this is not a first run, then we have last values available
+                if packets_last and pfc_rx_packets_last and pfc_duration_last then
+                    packets_last = tonumber(packets_last)
+                    pfc_rx_packets_last = tonumber(pfc_rx_packets_last)
+                    pfc_duration_last = tonumber(pfc_duration_last)
+
+                    -- Check actual condition of queue being in PFC storm
+                    if (occupancy_bytes > 0 and packets - packets_last == 0 and pfc_rx_packets - pfc_rx_packets_last > 0) or
+                        -- DEBUG CODE START. Uncomment to enable
+                        (debug_storm == "enabled") or
+                        -- DEBUG CODE END.
+                        (occupancy_bytes == 0 and packets - packets_last == 0 and (pfc_duration - pfc_duration_last) > poll_time * 0.8) then
+                        if time_left <= poll_time then
+                            redis.call('PUBLISH', 'PFC_WD_ACTION', '["' .. KEYS[i] .. '","storm"]')
+                            is_deadlock = true
+                            time_left = detection_time
+                        else
+                            time_left = time_left - poll_time
+                        end
+                    else
+                        if pfc_wd_action == 'alert' and pfc_wd_status ~= 'operational' then
+                            redis.call('PUBLISH', 'PFC_WD_ACTION', '["' .. KEYS[i] .. '","restore"]')
+                        end
+                        time_left = detection_time
+                    end
+                end
+
+            -- Save values for next run
+                redis.call('HSET', counters_table_name .. ':' .. KEYS[i], 'SAI_QUEUE_STAT_PACKETS_last', packets)
+                redis.call('HSET', counters_table_name .. ':' .. KEYS[i], 'PFC_WD_DETECTION_TIME_LEFT', time_left)
+                redis.call('HSET', counters_table_name .. ':' .. port_id, pfc_rx_pkt_key .. '_last', pfc_rx_packets)
+                redis.call('HDEL', counters_table_name .. ':' .. port_id, pfc_duration_key .. '_last')
+                redis.call('HSET', counters_table_name .. ':' .. port_id, pfc_duration_key .. '_last', pfc_duration)
+            end
+        end
+    end
+end
+
+return rets
+
-- 
2.25.1

