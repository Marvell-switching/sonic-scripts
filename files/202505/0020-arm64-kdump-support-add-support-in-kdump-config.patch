From 8ef4bfe5667bf23b5eea389982323f5091cf47e4 Mon Sep 17 00:00:00 2001
From: Elad Nachman <enachman@marvell.com>
Date: Sun, 18 May 2025 14:00:52 +0000
Subject: [PATCH] arm64 kdump support - add support in kdump config

Signed-off-by: Elad Nachman <enachman@marvell.com>
---
 scripts/sonic-kdump-config | 102 ++++++++++++++++++++++++++++++++++++-
 1 file changed, 101 insertions(+), 1 deletion(-)

diff --git a/scripts/sonic-kdump-config b/scripts/sonic-kdump-config
index d7304758..2f22b4ae 100755
--- a/scripts/sonic-kdump-config
+++ b/scripts/sonic-kdump-config
@@ -31,6 +31,7 @@ from sonic_installer.common import IMAGE_PREFIX
 
 aboot_cfg_template ="/host/image-%s/kernel-cmdline"
 grub_cfg = "/host/grub/grub.cfg"
+uboot_cfg = "uboot-env.txt"
 kdump_cfg = "/etc/default/kdump-tools"
 kdump_mem_file = "/sys/kernel/kexec_crash_size"
 machine_cfg = "/host/machine.conf"
@@ -104,6 +105,89 @@ def get_next_image():
     print_err("Unable to locate next SONiC image")
     sys.exit(1)
 
+## Detect if U-Boot is the bootloader by checking for the presence of `fw_printenv`.
+def is_uboot_present():
+    try:
+        # Check if the `fw_printenv` command exists
+        result = subprocess.run(['which', 'fw_printenv'], capture_output=True, text=True)
+        if result.returncode == 0:
+            print("U-Boot detected: `fw_printenv` command is available.")
+            return True
+        else:
+            print("U-Boot not detected: `fw_printenv` command is not available.")
+            return False
+    except Exception as e:
+        print(f"An error occurred while checking for U-Boot: {e}")
+        return False
+
+## Retrieve the current U-Boot environment variables.
+def get_uboot_env():
+    try:
+        result = subprocess.run(['fw_printenv'], capture_output=True, text=True, check=True)
+        env_vars = {}
+        for line in result.stdout.splitlines():
+            if '=' in line:
+                key, value = line.split('=', 1)
+                env_vars[key] = value
+        return env_vars
+    except subprocess.CalledProcessError as e:
+        print(f"Error retrieving U-Boot environment: {e}")
+        return None
+
+## Dump the U-Boot environment variables into a file.
+def dump_uboot_env(output_file):
+    try:
+        # Run the `fw_printenv` command to get the U-Boot environment
+        result = subprocess.run(['fw_printenv'], capture_output=True, text=True, check=True)
+
+        # Write the output to the specified file
+        with open(output_file, 'w', encoding='utf-8') as file:
+            file.write(result.stdout)
+
+        print(f"U-Boot environment variables have been dumped to {output_file}")
+    except FileNotFoundError:
+        print("Error: `fw_printenv` command not found. Ensure U-Boot tools are installed.")
+    except subprocess.CalledProcessError as e:
+        print(f"Error while running `fw_printenv`: {e}")
+    except Exception as e:
+        print(f"An unexpected error occurred: {e}")
+
+## Set a U-Boot environment variable.
+def set_uboot_env(key, value):
+    try:
+        subprocess.run(['fw_setenv', key, value], check=True)
+        print(f"Successfully set {key}={value}")
+    except subprocess.CalledProcessError as e:
+        print(f"Error setting U-Boot environment variable {key}: {e}")
+
+## Modify the U-Boot parameters to add or update the crashkernel parameter.
+def modify_crashkernel_param_uboot_env(crashkernel_value):
+    env_vars = get_uboot_env()
+    if env_vars is None:
+        print("Failed to retrieve U-Boot environment variables.")
+        return
+
+    # Get the current bootargs
+    bootargs = env_vars.get('linuxargs', '')
+
+    # Check if crashkernel is already present
+    if 'crashkernel=' in bootargs:
+        # Update the existing crashkernel parameter
+        new_bootargs = []
+        for param in bootargs.split():
+            if (param.startswith('crashkernel=')):
+                if (crashkernel_value != "0"):
+                    new_bootargs.append(f'crashkernel={crashkernel_value}')
+            else:
+                new_bootargs.append(param)
+        bootargs = ' '.join(new_bootargs)
+    else:
+        # Add the crashkernel parameter
+        bootargs += f' crashkernel={crashkernel_value}'
+
+    # Set the updated bootargs
+    set_uboot_env('linuxargs', bootargs)
+
 ## Search for Current/Next SONiC image in grub configuration
 #
 #  @param  lines Lines read from grub.cfg/cmdline file
@@ -371,7 +455,7 @@ def get_kdump_ssh_path():
 #
 #  @return The integer value X from USE_KDUMP=X in /etc/default/kdump-tools
 def read_use_kdump():
-    (rc, lines, err_str) = run_command("grep 'USE_KDUMP=.*' %s | cut -d = -f 2" % kdump_cfg, use_shell=False);
+    (rc, lines, err_str) = run_command("grep 'USE_KDUMP=.*' %s | cut -d = -f 2" % kdump_cfg, use_shell=True);
     if rc == 0 and type(lines) == list and len(lines) >= 1:
         try:
             return int(lines[0])
@@ -516,6 +600,9 @@ def kdump_enable(verbose, kdump_enabled, memory, num_dumps, image, cmdline_file,
     if verbose:
         print("Enabling kdump for image=[%s]" % image)
 
+    if (cmdline_file == uboot_cfg):
+        dump_uboot_env(uboot_cfg)
+
     # Existing functionality: Reading the kernel command line file
     try:
         lines = [line.rstrip('\n') for line in open(cmdline_file)]
@@ -555,6 +642,9 @@ def kdump_enable(verbose, kdump_enabled, memory, num_dumps, image, cmdline_file,
 
     if changed:
         rewrite_cfg(lines, cmdline_file)
+        if (cmdline_file == uboot_cfg):
+            modify_crashkernel_param_uboot_env(memory)
+            os.remove(uboot_cfg)
 
     # Enable kdump
     write_use_kdump(1)
@@ -626,6 +716,8 @@ def cmd_kdump_enable(verbose, image):
     elif open(machine_cfg, 'r').read().find('aboot_platform') >= 0:
         aboot_cfg = aboot_cfg_template % image
         return kdump_enable(verbose, kdump_enabled, memory, num_dumps, image, aboot_cfg, remote, ssh_string, ssh_path)
+    elif is_uboot_present():
+        return kdump_enable(verbose, kdump_enabled, memory, num_dumps, image, uboot_cfg, remote, ssh_string, ssh_path)
     else:
         print("Feature not supported on this platform")
         return False
@@ -657,6 +749,9 @@ def kdump_disable(verbose, image, booter_config_file_path):
     if verbose:
         print("Disabling kdump for image=[%s]\n" % image)
 
+    if (booter_config_file_path == uboot_cfg):
+        dump_uboot_env(uboot_cfg)
+
     try:
         with open(booter_config_file_path) as config_file_handler:
             lines = [line.rstrip('\n') for line in config_file_handler]
@@ -680,6 +775,9 @@ def kdump_disable(verbose, image, booter_config_file_path):
 
     if changed:
         rewrite_cfg(lines, booter_config_file_path)
+        if (booter_config_file_path == uboot_cfg):
+            modify_crashkernel_param_uboot_env("0")
+            os.remove(uboot_cfg)
 
     if not os.path.exists('/etc/sonic/config_db.json'):
         print_err("Startup configuration not found, Kdump configuration is not saved")
@@ -708,6 +806,8 @@ def cmd_kdump_disable(verbose):
     elif open(machine_cfg, 'r').read().find('aboot_platform') >= 0:
         aboot_cfg = aboot_cfg_template % image
         return kdump_disable(verbose, image, aboot_cfg)
+    elif is_uboot_present():
+        return kdump_disable(verbose, image, uboot_cfg)
     else:
         print("Feature not supported on this platform")
         return False
-- 
2.25.1

