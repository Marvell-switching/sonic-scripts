From 03555b4054ea08099002cf5dd76329c46c1dce3d Mon Sep 17 00:00:00 2001
From: Pavan Naregundi <pnaregundi@marvell.com>
Date: Fri, 12 Jan 2024 06:40:28 +0000
Subject: Fixes for AC5X platform

Signed-off-by: Pavan Naregundi <pnaregundi@marvell.com>
---
 ...-clear-BM-pool-before-initialization.patch | 62 +++++++++++++++
 ...on-add-timeout-for-PHY-init-complete.patch | 75 +++++++++++++++++++
 ...i-xenon-fix-PHY-init-clock-stability.patch | 68 +++++++++++++++++
 patch/series                                  |  3 +
 4 files changed, 208 insertions(+)
 create mode 100644 patch/0001-clear-BM-pool-before-initialization.patch
 create mode 100644 patch/0001-mmc-sdhci-xenon-add-timeout-for-PHY-init-complete.patch
 create mode 100644 patch/0001-mmc-sdhci-xenon-fix-PHY-init-clock-stability.patch

diff --git a/patch/0001-clear-BM-pool-before-initialization.patch b/patch/0001-clear-BM-pool-before-initialization.patch
new file mode 100644
index 0000000..e57269a
--- /dev/null
+++ b/patch/0001-clear-BM-pool-before-initialization.patch
@@ -0,0 +1,62 @@
+From d627b7d0a8c48aff31cb2ba2e94c55716e513382 Mon Sep 17 00:00:00 2001
+From: Jenishkumar Patel <jpatel2@marvell.com>
+Date: Mon, 18 Dec 2023 00:38:24 -0800
+Subject: clear BM pool before initialization
+
+register value persisted after booting the kernel using
+kexec which resulted in kernel panic. Thus cleared the
+BM pool registers before initialisation to fix the issue.
+
+Signed-off-by: Jenishkumar Patel <jpatel2@marvell.com>
+---
+ .../net/ethernet/marvell/mvpp2/mvpp2_main.c   | 28 +++++++++++++++++++
+ 1 file changed, 28 insertions(+)
+
+diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+index 68c5ed871..862de8049 100644
+--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
++++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+@@ -581,12 +581,40 @@ static int mvpp2_bm_pools_init(struct device *dev, struct mvpp2 *priv)
+ 	return err;
+ }
+ 
++/* Cleanup pool before actual initialization in the OS */
++static void mvpp2_bm_pool_cleanup(struct mvpp2 *priv, int pool_id)
++{
++	u32 val;
++	int i;
++	/* Drain the BM from all possible residues left by firmware */
++	for (i = 0; i < MVPP2_BM_POOL_SIZE_MAX; i++)
++		mvpp2_read(priv, MVPP2_BM_PHY_ALLOC_REG(pool_id));
++	/* Stop the BM pool */
++	val = mvpp2_read(priv, MVPP2_BM_POOL_CTRL_REG(pool_id));
++	val |= MVPP2_BM_STOP_MASK;
++	mvpp2_write(priv, MVPP2_BM_POOL_CTRL_REG(pool_id), val);
++	/* Mask BM all interrupts */
++	mvpp2_write(priv, MVPP2_BM_INTR_MASK_REG(pool_id), 0);
++	/* Clear BM cause register */
++	mvpp2_write(priv, MVPP2_BM_INTR_CAUSE_REG(pool_id), 0);
++}
++
+ static int mvpp2_bm_init(struct device *dev, struct mvpp2 *priv)
+ {
+ 	enum dma_data_direction dma_dir = DMA_FROM_DEVICE;
+ 	int i, err, poolnum = MVPP2_BM_POOLS_NUM;
+ 	struct mvpp2_port *port;
+ 
++	if (priv->percpu_pools)
++		poolnum = mvpp2_get_nrxqs(priv) * 2;
++
++	for (i = 0; i < poolnum; i++) {
++		/* Make sure about the pool state in case it was
++		 * used by firmware.
++		 */
++		mvpp2_bm_pool_cleanup(priv, i);
++	}
++
+ 	if (priv->percpu_pools) {
+ 		for (i = 0; i < priv->port_count; i++) {
+ 			port = priv->port_list[i];
+-- 
+2.25.1
+
diff --git a/patch/0001-mmc-sdhci-xenon-add-timeout-for-PHY-init-complete.patch b/patch/0001-mmc-sdhci-xenon-add-timeout-for-PHY-init-complete.patch
new file mode 100644
index 0000000..bd8e391
--- /dev/null
+++ b/patch/0001-mmc-sdhci-xenon-add-timeout-for-PHY-init-complete.patch
@@ -0,0 +1,75 @@
+From 09e23823ae9a3e2d5d20f2e1efe0d6e48cef9129 Mon Sep 17 00:00:00 2001
+From: Elad Nachman <enachman@marvell.com>
+Date: Thu, 22 Feb 2024 21:17:14 +0200
+Subject: mmc: sdhci-xenon: add timeout for PHY init complete
+
+AC5X spec says PHY init complete bit must be polled until zero.
+We see cases in which timeout can take longer than the standard
+calculation on AC5X, which is expected following the spec comment above.
+According to the spec, we must wait as long as it takes for that bit to
+toggle on AC5X.
+Cap that with 100 delay loops so we won't get stuck forever.
+
+Fixes: 06c8b667ff5b ("mmc: sdhci-xenon: Add support to PHYs of Marvell Xenon SDHC")
+Acked-by: Adrian Hunter <adrian.hunter@intel.com>
+Cc: stable@vger.kernel.org
+Signed-off-by: Elad Nachman <enachman@marvell.com>
+Link: https://lore.kernel.org/r/20240222191714.1216470-3-enachman@marvell.com
+Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
+---
+ drivers/mmc/host/sdhci-xenon-phy.c | 29 ++++++++++++++++++++---------
+ 1 file changed, 20 insertions(+), 9 deletions(-)
+
+diff --git a/drivers/mmc/host/sdhci-xenon-phy.c b/drivers/mmc/host/sdhci-xenon-phy.c
+index c3096230a969..cc9d28b75eb9 100644
+--- a/drivers/mmc/host/sdhci-xenon-phy.c
++++ b/drivers/mmc/host/sdhci-xenon-phy.c
+@@ -110,6 +110,8 @@
+ #define XENON_EMMC_PHY_LOGIC_TIMING_ADJUST	(XENON_EMMC_PHY_REG_BASE + 0x18)
+ #define XENON_LOGIC_TIMING_VALUE		0x00AA8977
+ 
++#define XENON_MAX_PHY_TIMEOUT_LOOPS		100
++
+ /*
+  * List offset of PHY registers and some special register values
+  * in eMMC PHY 5.0 or eMMC PHY 5.1
+@@ -278,18 +280,27 @@ static int xenon_emmc_phy_init(struct sdhci_host *host)
+ 	/* get the wait time */
+ 	wait /= clock;
+ 	wait++;
+-	/* wait for host eMMC PHY init completes */
+-	udelay(wait);
+ 
+-	reg = sdhci_readl(host, phy_regs->timing_adj);
+-	reg &= XENON_PHY_INITIALIZAION;
+-	if (reg) {
++	/*
++	 * AC5X spec says bit must be polled until zero.
++	 * We see cases in which timeout can take longer
++	 * than the standard calculation on AC5X, which is
++	 * expected following the spec comment above.
++	 * According to the spec, we must wait as long as
++	 * it takes for that bit to toggle on AC5X.
++	 * Cap that with 100 delay loops so we won't get
++	 * stuck here forever:
++	 */
++
++	ret = read_poll_timeout(sdhci_readl, reg,
++				!(reg & XENON_PHY_INITIALIZAION),
++				wait, XENON_MAX_PHY_TIMEOUT_LOOPS * wait,
++				false, host, phy_regs->timing_adj);
++	if (ret)
+ 		dev_err(mmc_dev(host->mmc), "eMMC PHY init cannot complete after %d us\n",
+-			wait);
+-		return -ETIMEDOUT;
+-	}
++			wait * XENON_MAX_PHY_TIMEOUT_LOOPS);
+ 
+-	return 0;
++	return ret;
+ }
+ 
+ #define ARMADA_3700_SOC_PAD_1_8V	0x1
+-- 
+2.25.1
+
diff --git a/patch/0001-mmc-sdhci-xenon-fix-PHY-init-clock-stability.patch b/patch/0001-mmc-sdhci-xenon-fix-PHY-init-clock-stability.patch
new file mode 100644
index 0000000..9562d7b
--- /dev/null
+++ b/patch/0001-mmc-sdhci-xenon-fix-PHY-init-clock-stability.patch
@@ -0,0 +1,68 @@
+From 8e9f25a290ae0016353c9ea13314c95fb3207812 Mon Sep 17 00:00:00 2001
+From: Elad Nachman <enachman@marvell.com>
+Date: Thu, 22 Feb 2024 22:09:30 +0200
+Subject: mmc: sdhci-xenon: fix PHY init clock stability
+
+Each time SD/mmc phy is initialized, at times, in some of
+the attempts, phy fails to completes its initialization
+which results into timeout error. Per the HW spec, it is
+a pre-requisite to ensure a stable SD clock before a phy
+initialization is attempted.
+
+Fixes: 06c8b667ff5b ("mmc: sdhci-xenon: Add support to PHYs of Marvell Xenon SDHC")
+Acked-by: Adrian Hunter <adrian.hunter@intel.com>
+Cc: stable@vger.kernel.org
+Signed-off-by: Elad Nachman <enachman@marvell.com>
+Link: https://lore.kernel.org/r/20240222200930.1277665-1-enachman@marvell.com
+Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
+---
+ drivers/mmc/host/sdhci-xenon-phy.c | 19 +++++++++++++++++++
+ 1 file changed, 19 insertions(+)
+
+diff --git a/drivers/mmc/host/sdhci-xenon-phy.c b/drivers/mmc/host/sdhci-xenon-phy.c
+index 8cf3a375de65..c3096230a969 100644
+--- a/drivers/mmc/host/sdhci-xenon-phy.c
++++ b/drivers/mmc/host/sdhci-xenon-phy.c
+@@ -11,6 +11,7 @@
+ #include <linux/slab.h>
+ #include <linux/delay.h>
+ #include <linux/ktime.h>
++#include <linux/iopoll.h>
+ #include <linux/of_address.h>
+ 
+ #include "sdhci-pltfm.h"
+@@ -216,6 +217,19 @@ static int xenon_alloc_emmc_phy(struct sdhci_host *host)
+ 	return 0;
+ }
+ 
++static int xenon_check_stability_internal_clk(struct sdhci_host *host)
++{
++	u32 reg;
++	int err;
++
++	err = read_poll_timeout(sdhci_readw, reg, reg & SDHCI_CLOCK_INT_STABLE,
++				1100, 20000, false, host, SDHCI_CLOCK_CONTROL);
++	if (err)
++		dev_err(mmc_dev(host->mmc), "phy_init: Internal clock never stabilized.\n");
++
++	return err;
++}
++
+ /*
+  * eMMC 5.0/5.1 PHY init/re-init.
+  * eMMC PHY init should be executed after:
+@@ -232,6 +246,11 @@ static int xenon_emmc_phy_init(struct sdhci_host *host)
+ 	struct xenon_priv *priv = sdhci_pltfm_priv(pltfm_host);
+ 	struct xenon_emmc_phy_regs *phy_regs = priv->emmc_phy_regs;
+ 
++	int ret = xenon_check_stability_internal_clk(host);
++
++	if (ret)
++		return ret;
++
+ 	reg = sdhci_readl(host, phy_regs->timing_adj);
+ 	reg |= XENON_PHY_INITIALIZAION;
+ 	sdhci_writel(host, reg, phy_regs->timing_adj);
+-- 
+2.25.1
+
diff --git a/patch/series b/patch/series
index 2872e4c..a823d7b 100755
--- a/patch/series
+++ b/patch/series
@@ -256,6 +256,9 @@ armhf_secondary_boot_online.patch
 0021-dts-ac5-Support-boards-with-more-than-4G-DDR.patch
 0022-usb-ac5-Support-board-with-more-than-4G-DDR.patch
 0023-mvneta-ac5x-Support-board-with-more-than-4G-DDR.patch
+0001-clear-BM-pool-before-initialization.patch
+0001-mmc-sdhci-xenon-fix-PHY-init-clock-stability.patch
+0001-mmc-sdhci-xenon-add-timeout-for-PHY-init-complete.patch
 
 # amd-pensando elba support
 0001-hwmon-ltc2978-Add-support-for-LTC3888.patch
-- 
2.25.1

